<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <name>${project.artifactId} => a parent project</name>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.example</groupId>
  <artifactId>testcontainers-examples</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <modules>
    <module>ui</module>
    <module>jboss-testcontainers-selenide-local-e2e-tests</module>
    <module>jboss-testcontainers-selenide-remote-e2e-tests</module>
    <module>jboss-testcontainers-selenide-dockerfile-e2e-tests</module>
    <module>testcontainers-spring-boot-jpa-pg-example</module>
  </modules>

  <properties>
    <java.version>1.8</java.version>
    <lombok.version>1.18.12</lombok.version>
    <logback.version>1.2.3</logback.version>
    <jackson.version>2.10.3</jackson.version>
    <selenide.version>5.7.0</selenide.version>
    <javax.json.version>1.1.4</javax.json.version>
    <junit-jupiter.version>5.6.0</junit-jupiter.version>
    <junit-platform.version>1.6.0</junit-platform.version>
    <testcontainers.version>1.13.0</testcontainers.version>
    <spring-cloud.version>Hoxton.SR3</spring-cloud.version>
    <spring-boot.version>2.2.5.RELEASE</spring-boot.version>
    <maven-war-plugin.version>3.2.3</maven-war-plugin.version>
    <maven-antrun-plugin.version>1.8</maven-antrun-plugin.version>
    <docker-maven-plugin.version>0.33.0</docker-maven-plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
    <jakarta.jakartaee-api.version>8.0.0</jakarta.jakartaee-api.version>
    <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
    <maven-failsafe-plugin.version>3.0.0-M4</maven-failsafe-plugin.version>
    <maven-surefire-plugin.version>3.0.0-M4</maven-surefire-plugin.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${jackson.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.glassfish</groupId>
        <artifactId>javax.json</artifactId>
        <version>${javax.json.version}</version>
        <type>jar</type>
      </dependency>
      <dependency>
        <groupId>jakarta.platform</groupId>
        <artifactId>jakarta.jakartaee-api</artifactId>
        <version>${jakarta.jakartaee-api.version}</version>
        <scope>provided</scope>
        <type>jar</type>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${testcontainers.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <defaultGoal>clean process-resources war:war test</defaultGoal>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${maven-antrun-plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>20020829</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>logback</id>
            <phase>process-resources</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target name="copy correct maven logback.xml and Dockerfile">
                <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
                <if>
                  <available file="${project.basedir}/src/main/resources/logback.maven.xml"/>
                  <then>
                    <copy file="${project.basedir}/src/main/resources/logback.maven.xml"
                          toFile="${project.basedir}/src/main/resources/logback.xml"
                          overwrite="true" />
                  </then>
                  <else>
                    <echo message="skipping logback.xml for ${project.artifactId}"/>
                  </else>
                </if>
                <if>
                  <available file="${project.basedir}/Dockerfile.maven"/>
                  <then>
                    <copy file="${project.basedir}/Dockerfile.maven"
                          toFile="${project.basedir}/Dockerfile"
                          overwrite="true" />
                  </then>
                  <else>
                    <echo message="skipping Dockerfile for ${project.artifactId}"/>
                  </else>
                </if>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <configuration>
            <source>${java.version}</source>
            <target>${java.version}</target>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven-war-plugin.version}</version>
          <configuration>
            <failOnMissingWebXml>false</failOnMissingWebXml>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring-boot.version}</version>
          <configuration>
            <executable>true</executable>
          </configuration>
          <executions>
            <execution>
            <id>build-info</id>
              <phase>package</phase>
              <goals><goal>build-info</goal></goals>
            </execution>
            <execution>
              <id>repackage</id>
              <phase>package</phase>
              <goals><goal>repackage</goal></goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${docker-maven-plugin.version}</version>
          <configuration>
            <follow>false</follow>
            <verbose>true</verbose>
            <useColor>true</useColor>
            <logDate>default</logDate>
            <autoPull>always</autoPull>
            <keepRunning>false</keepRunning>
            <watchInterval>500</watchInterval>
            <allContainers>true</allContainers>
            <removeVolumes>true</removeVolumes>
            <autoCreateCustomNetworks>false</autoCreateCustomNetworks>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

</project>
