/*
 * This file was generated by the Gradle 'init' task.
 */

allprojects {
    group = 'org.example'
    version = '1.0.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    repositories {
        // mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    }

    sourceCompatibility = '1.8'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        testLogging {
            showExceptions = true
            showStandardStreams = true
            events(
                org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED,
                org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED,
                org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED,
            )
        }
    }

    [clean, compileJava].each {
        it.dependsOn('process-resources')
    }

    tasks.create(name: 'process-resources') {
        shouldRunAfter("clean", "compileJava")
        doFirst {
            def basePath = projectDir.getPath()
            // copy correct logback.xml
            def xml = java.nio.file.Paths.get(basePath, "src", "main", "resources", "logback.gradle.xml")
            if (xml.toFile().exists()) {
                java.nio.file.Files.copy(
                    xml,
                    java.nio.file.Paths.get(basePath, "src", "main", "resources", "logback.xml"),
                    java.nio.file.StandardCopyOption.REPLACE_EXISTING
                )
                println "copied: $xml"
            }
            // copy correct Dockerfile
            def dockerfile = java.nio.file.Paths.get(basePath, "Dockerfile.gradle")
            if (dockerfile.toFile().exists()) {
                java.nio.file.Files.copy(
                    dockerfile,
                    java.nio.file.Paths.get(basePath, "Dockerfile"),
                    java.nio.file.StandardCopyOption.REPLACE_EXISTING
                )
                println "copied: $dockerfile"
            }
        }
    }
}

// anyway, use: ./gradlew build -p ui ; ./gradlew
defaultTasks('clean', 'process-resources', 'ui:war', 'build')
